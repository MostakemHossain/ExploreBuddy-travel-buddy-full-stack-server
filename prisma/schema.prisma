// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @unique @default(uuid())
  email              String               @unique
  name               String
  password           String
  role               UserRole             @default(USER)
  status             UserStatus           @default(ACTIVE)
  isDeleted          Boolean              @default(false)
  profilePhoto       String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  userProfile        UserProfile?
  Trip               Trip[]
  TravelBuddyRequest TravelBuddyRequest[]

  @@map("users")
}

model UserProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  bio       String
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("userProfile")
}

model Trip {
  id                 String               @id @default(uuid())
  userId             String
  destination        String
  description        String               @default("")
  startDate          String
  endDate            String
  budget             Float
  status             Boolean              @default(false)
  activities         String[]
  itinerary          String[]
  photos             String[]
  travelType         String               @default("")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  user               User                 @relation(fields: [userId], references: [id])
  TravelBuddyRequest TravelBuddyRequest[]

  @@map("trip")
}

model TravelBuddyRequest {
  id        String                   @id @default(uuid())
  tripId    String
  userId    String
  status    TravelBuddyRequestStatus @default(PENDING)
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt

  trip Trip @relation(fields: [tripId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("travelBuddyRequest")
}

model Contact {
  id          String   @id @default(uuid())
  name        String
  email       String
  phoneNumber String
  message     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("contacts")
}

model Team {
  id           String  @id @default(uuid())
  name         String
  designation  String
  profilePhoto String?
  facebookURL  String?
  instagramURL String?
  linkedinURL  String?

  @@map("teams")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum TravelBuddyRequestStatus {
  PENDING
  APPROVED
  REJECTED
}
